#################################################################################
# A reusable workflow to promote images & indexes from one channel to another
# for a given workflow run.
#################################################################################

name: Workflow - Promote

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      destination-channel:
        description: |
          The destination channel to promote packages to. Valid values are:
          - release-candidates
          - stable
        type: string
      source-channel:
        description: |
          The source channel to promote packages from. Valid values are:
          - ci-builds
          - release-candidates
        type: string
      version:
        description: The package version to promote.
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  promote:
    name: Promote
    runs-on: ubuntu-24.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID_NEW: ${{ secrets.SUMOLOGIC_OTEL_CICD_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY_NEW: ${{ secrets.SUMOLOGIC_OTEL_CICD_SECRET_ACCESS_KEY }}
      PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
      OTEL_BUILDS_BUCKET_ci-builds: DS
      OTEL_BUILDS_BUCKET_release-candidates: DS
      OTEL_BUILDS_BUCKET_stable: DS
    steps:
      - uses: actions/checkout@v4

      - name: Verify channels
        run: |
          src="${{ inputs.source-channel }}"
          dst="${{ inputs.destination-channel }}"

          if [ "$src" = "ci-builds" ]; then
            if [ "$dst" = "release-candidates" ]; then
              exit 0
            fi
          fi

          if [ "$src" = "release-candidates" ]; then
            if [ "$dst" = "stable" ]; then
              exit 0
            fi
          fi

          echo "Unsupported channels combination: ${src} -> ${dst}"
          exit 1

      - name: Install packagecloud-go
        run: go install github.com/amdprophet/packagecloud-go/cmd/packagecloud@v0.5.0

      - name: Add GOPATH bin to PATH
        run: echo "$(go env GOPATH)/bin" >> "$GITHUB_PATH"

      - name: Get latest package version (source channel)
        id: latest-source
        run: |
          repo="sumologic/${{ inputs.source-channel }}"
          name="otelcol-sumo"
          packagecloud versions latest "${repo}" "${name}" | tee version

          echo "version=$(cat version)" >> "$GITHUB_OUTPUT"

      - name: Compare version to latest (source channel)
        id: compare-source
        run: |
          version="${{ inputs.version }}"
          latest="${{ steps.latest-source.outputs.version }}"
          packagecloud versions compare "${version}" "${latest}" | tee result

          echo "result=$(cat result)" >> "$GITHUB_OUTPUT"

      - name: Output new S3 targets
        id: s3-buckets-new
        run: |
          cat >> "$GITHUB_OUTPUT" <<'EOF'
          otel_builds_bucket_ci-builds=sumo-otel-builds-dev-c64ec98a
          otel_builds_bucket_release-candidates=sumo-otel-builds-rc-6d7808fb
          otel_builds_bucket_stable=sumo-otel-builds-c8665146
          EOF

      # NOTE: If the version we're trying to promote is equal to the latest
      # version available in the source repository then we need to update the
      # latest_version file in the source repository.
      - name: Get previous package version (source channel)
        if: steps.compare-source.outputs.result == 'equal'
        id: previous-source
        run: |
          repo="sumologic/${{ inputs.source-channel }}"
          name="otelcol-sumo"
          packagecloud versions previous "${repo}" "${name}" | tee version

          echo "version=$(cat version)" >> "$GITHUB_OUTPUT"

      - name: Set latest version to previous (source channel)
        if: steps.compare-source.outputs.result == 'equal'
        run: |
          previous="${{ steps.previous-source.outputs.version }}"
          channel="${{ inputs.source-channel }}"
          bucket="sumologic-osc-${channel}"
          bucket_new="${{ steps['s3-buckets-new'].outputs[ format('otel_builds_bucket_{0}', inputs['source-channel']) ] }}"
          file="latest_version"
          uri="s3://${bucket}/${file}"
          uri_new="s3://${bucket_new}/${file}"

          echo "${previous}" >> "${file}"
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3 cp "${file}" "${uri}" --content-type plain

          echo "Uploading to new S3 target"
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID_NEW }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY_NEW }} aws s3 cp "${file}" "${uri_new}" --content-type plain

      - name: Promote packages
        run: |
          src="sumologic/${{ inputs.source-channel }}"
          dst="sumologic/${{ inputs.destination-channel }}"
          version="${{ inputs.version }}"

          packagecloud promote by-search "${src}" "${dst}" -q "${version}"

      - name: Promote artifacts
        run: |
          src="sumologic-osc-${{ inputs.source-channel }}"
          dst="sumologic-osc-${{ inputs.destination-channel }}"
          version="${{ inputs.version }}"
          src_uri="s3://${src}/${version}"
          dst_uri="s3://${dst}/${version}"

          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3 cp --recursive "${src_uri}" "${dst_uri}"

          src_new="${{ steps['s3-buckets-new'].outputs[ format('otel_builds_bucket_{0}', inputs['source-channel']) ] }}"
          dst_new="${{ steps['s3-buckets-new'].outputs[ format('otel_builds_bucket_{0}', inputs['destination-channel']) ] }}"
          src_uri_new="s3://${src_new}/${version}"
          dst_uri_new="s3://${dst_new}/${version}"

          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID_NEW }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY_NEW }} aws s3 cp --recursive "${src_uri_new}" "${dst_uri_new}"

      - name: Get latest package version (destination channel)
        id: latest-destination
        run: |
          repo="sumologic/${{ inputs.destination-channel }}"
          name="otelcol-sumo"
          packagecloud versions latest "${repo}" "${name}" | tee version

          echo "version=$(cat version)" >> "$GITHUB_OUTPUT"

      # NOTE: Always set the latest_version file in the destination bucket to
      # to the latest version found in the destination Packagecloud repository.
      # The latest version won't always match what is being promoted. This
      # ensures that re-running the promotion workflow will fix cases where
      # latest_version in the destination bucket does not match the latest
      # package version in the destination Packagecloud repository. This can
      # only happen if the workflow fails before updating latest_version in the
      # destination bucket but after one or more packages have been promoted.
      - name: Set latest version to latest (destination channel)
        run: |
          version="${{ steps.latest-destination.outputs.version }}"
          channel="${{ inputs.destination-channel }}"
          bucket="sumologic-osc-${channel}"
          file="latest_version"
          uri="s3://${bucket}/${file}"

          echo "${version}" >> "${file}"
          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} aws s3 cp "${file}" "${uri}" --content-type plain

          bucket_new="${{ steps['s3-buckets-new'].outputs[ format('otel_builds_bucket_{0}', inputs['destination-channel']) ] }}"
          uri_new="s3://${bucket_new}/${file}"

          AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID_NEW }} AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY_NEW }} aws s3 cp "${file}" "${uri_new}" --content-type plain
