name: '_reusable_build_package'

on:
  workflow_call:
    inputs:
      otc_version:
        required: true
        type: string
      otc_sumo_version:
        required: true
        type: string
      otc_build_number:
        required: false
        type: string
      cmake_target:
        required: true
        type: string
      workflow_id:
        required: false
        type: string
      runs_on:
        required: true
        type: string
    secrets:
      gh_artifacts_token:
        required: true
      apple_developer_certificate_p12_base64:
        required: false
      apple_developer_certificate_password:
        required: false
      productbuild_identity_name:
        required: false

jobs:
  build_package:
    runs-on: ${{ inputs.runs_on }}
    name: Build
    outputs:
      package_path: ${{ steps.package.outputs.path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Workflow URL for sumologic-otel-collector
        if: inputs.workflow_id != ''
        run: |
          org="SumoLogic"
          repo="sumologic-otel-collector"
          workflow_id="${{ inputs.workflow_id }}"
          echo "https://github.com/${org}/${repo}/actions/runs/${workflow_id}"

      - name: Make build directory
        if: runner.os != 'Linux'
        run: mkdir build

      - name: Use GitHub Artifacts for binaries
        if: inputs.workflow_id != ''
        run: echo "OTC_ARTIFACTS_SOURCE=github-artifacts" >> $GITHUB_ENV

      - name: Import macOS Code-Signing Certificates
        if: runner.os == 'macOS'
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.apple_developer_certificate_p12_base64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.apple_developer_certificate_password }}

      - name: Build Makefile
        id: cmake-linux
        if: runner.os == 'Linux'
        uses: ./ci/github-actions/cmake
        with:
          otc_version: ${{ inputs.otc_version }}
          otc_sumo_version: ${{ inputs.otc_sumo_version }}
          otc_build_number: ${{ inputs.otc_build_number }}
          target: ${{ inputs.cmake_target }}
          workflow_id: ${{ inputs.workflow_id }}

      - name: Build Makefile
        id: cmake-other
        if: runner.os != 'Linux'
        env:
          OTC_VERSION: ${{ inputs.otc_version }}
          OTC_SUMO_VERSION: ${{ inputs.otc_sumo_version }}
          OTC_BUILD_NUMBER: ${{ inputs.otc_build_number }}
          TARGET: ${{ inputs.cmake_target }}
          PRODUCTBUILD_IDENTITY_NAME: ${{ secrets.productbuild_identity_name }}
        working-directory: build
        run: cmake ../

      - name: Set simple package outputs
        id: package
        env:
          PACKAGE_NAME: >-
            ${{
            steps.cmake-linux.outputs.package_name ||
            steps.cmake-other.outputs.package_name
            }}
        run: >
          echo path="$PACKAGE_NAME" >> $GITHUB_OUTPUT

      - name: Set simple otc-bin outputs
        id: otc-bin
        if: inputs.workflow_id != ''
        env:
          OTC_BIN: >-
            ${{
            steps.cmake-linux.outputs.otc-bin ||
            steps.cmake-other.outputs.otc-bin
            }}
        run: >
          echo path="$OTC_BIN" >> $GITHUB_OUTPUT

      # Download the artifacts required to build the package target. If
      # use_github_artifacts is false then this will be skipped and CMake will
      # attempt to fetch the artifacts from a GitHub Release matching
      # otc_version and otc_sumo_version.
      - name: Download artifacts from sumologic-otel-collector
        uses: dawidd6/action-download-artifact@v2.24.3
        if: inputs.workflow_id != ''
        with:
          github_token: ${{ secrets.gh_artifacts_token }}
          repo: SumoLogic/sumologic-otel-collector
          run_id: ${{ inputs.workflow_id }}
          name: ${{ steps.otc-bin.outputs.path }}
          path: ./build/gh-artifacts
          if_no_artifact_found: fail

      - name: Build package
        if: runner.os == 'Linux'
        uses: ./ci/github-actions/make
        with:
          target: package

      - name: Build package
        if: runner.os != 'Linux'
        working-directory: build
        run: make package

      - name: Store package as action artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.package.outputs.path }}
          path: ./build/${{ steps.package.outputs.path }}
          if-no-files-found: error

  test_package:
    runs-on: ${{ inputs.runs_on }}
    name: Test
    needs: build_package
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download macOS package
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build_package.outputs.package_path }}
          path: artifacts/

      - name: Verify installer
        if: inputs.cmake_target == 'otc_darwin_amd64_productbuild'
        run: sudo ./ci/verify_installer.sh "artifacts/${{ needs.build_package.outputs.package_path }}"
