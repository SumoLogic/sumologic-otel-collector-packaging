# Global properties containing lists of packaging targets which are used to
# create targets to build groups of packages at a time
set_property(GLOBAL PROPERTY all_package_targets)
set_property(GLOBAL PROPERTY all_linux_package_targets)
set_property(GLOBAL PROPERTY all_deb_package_targets)
set_property(GLOBAL PROPERTY all_rpm_package_targets)

# Creates targets for all packages targets
function(create_packages_targets)
  create_packages_target()
  create_linux_packages_target()
  create_deb_packages_target()
  create_rpm_packages_target()
endfunction()

# Creates a target for building all packages
function(create_packages_target)
  get_property(target_dependencies GLOBAL PROPERTY all_package_targets)
  add_custom_target("packages" DEPENDS ${target_dependencies})
endfunction()

# Creates a target for building all linux packages (e.g. deb & rpm)
function(create_linux_packages_target)
  get_property(target_dependencies GLOBAL PROPERTY all_linux_package_targets)
  add_custom_target("linux-packages" DEPENDS ${target_dependencies})
endfunction()

# Creates a target for building all deb packages
function(create_deb_packages_target)
  get_property(target_dependencies GLOBAL PROPERTY all_deb_package_targets)
  add_custom_target("deb-packages" DEPENDS ${target_dependencies})
endfunction()

# Creates a target for building all rpm packages
function(create_rpm_packages_target)
  get_property(target_dependencies GLOBAL PROPERTY all_rpm_package_targets)
  add_custom_target("rpm-packages" DEPENDS ${target_dependencies})
endfunction()

# Create a package target for a given package name and path to CPackConfig
function(create_package_target name cfg)
  add_custom_target(${name}
    COMMAND ${CMAKE_CPACK_COMMAND} --config ${cfg}
    DEPENDS ${cfg}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    VERBATIM
  )
endfunction()

# Build CPackConfig, create a target for building the package and add the target
# to the list of all package targets
macro(build_cpack_config)
  require_variables(
    "GH_ARTIFACTS_DIR"
    "SOURCE_OTC_BINARY"
    "OTC_BINARY"
    "target_name"
  )

  # Set a GitHub output with a name matching ${target_name}-pkg and a value
  # equal to the filename of the package that will be built. This provides
  # GitHub Actions with the package filename so that it can be uploaded as a
  # workflow artifact.
  set(package_file_name "${CPACK_PACKAGE_FILE_NAME}.${PACKAGE_FILE_EXTENSION}")
  set_github_output("${target_name}-pkg" "${package_file_name}")

  # Set a GitHub output with a name matching ${target_name}-otc-bin and a value
  # equal to the name of the otelcol-sumo binary artifact that we want GitHub
  # Actions to fetch from the sumologic-otel-collector's GitHub Workflow
  # artifacts. This is only used when the OTC_ARTIFACTS_SOURCE environment
  # variable is set to "github-artifacts" which disables fetching artifacts from
  # a GitHub Release.
  if(DEFINED ENV{OTC_ARTIFACTS_SOURCE})
    if($ENV{OTC_ARTIFACTS_SOURCE} STREQUAL "github-artifacts")
      file(MAKE_DIRECTORY "${GH_ARTIFACTS_DIR}")
      file(CHMOD_RECURSE "${GH_ARTIFACTS_DIR}"
        DIRECTORY_PERMISSIONS
          OWNER_WRITE OWNER_READ OWNER_EXECUTE
          GROUP_WRITE GROUP_READ GROUP_EXECUTE
          WORLD_WRITE WORLD_READ WORLD_EXECUTE
      )
      set_github_output("${target_name}-otc-bin" "${GH_OUTPUT_OTC_BIN}")
    else()
      message(FATAL_ERROR
        "Unsupported value for OTC_ARTIFACTS_SOURCE environment variable: $ENV{OTC_ARTIFACTS_SOURCE}"
      )
    endif()

    # Create a target, if the target does not yet exist, for copying the
    # otelcol-sumo binary from the gh-actions directory to the artifacts
    # directory
    if(TARGET "${SOURCE_OTC_BINARY}")
      message(STATUS "Target already exists: ${SOURCE_OTC_BINARY}")
    else()
      message(STATUS "Creating target: ${SOURCE_OTC_BINARY}")
      file(MAKE_DIRECTORY "${SOURCE_OTC_BINARY_DIR}")
      add_custom_target("${SOURCE_OTC_BINARY}"
        COMMAND ${CMAKE_COMMAND} -E copy ${GH_ARTIFACT_OTC_BINARY_PATH} ${SOURCE_OTC_BINARY_PATH}
        VERBATIM
      )
    endif()
  else()
    # Create a target for downloading the otelcol-sumo binary from GitHub
    # Releases if the target does not exist yet
    if(TARGET "${SOURCE_OTC_BINARY}")
      message(STATUS "Target already exists: ${SOURCE_OTC_BINARY}")
    else()
      message(STATUS "Creating target: ${SOURCE_OTC_BINARY}")
      require_variables("OTC_GIT_TAG")
      create_otelcol_sumo_target(
        "${SOURCE_OTC_BINARY}"
        "${OTC_BINARY}"
        "${OTC_GIT_TAG}"
        "${SOURCE_OTC_BINARY_DIR}"
      )
    endif()
  endif()

  # Set CPACK_OUTPUT_CONFIG_FILE to prevent other CPackConfigs generated by this
  # project from overwriting each other
  set(CPACK_OUTPUT_CONFIG_FILE "${CMAKE_BINARY_DIR}/${target_name}-CPackConfig.cmake")

  # Build CPackConfig and store it on disk at path in CPACK_OUTPUT_CONFIG_FILE
  include(CPack)

  # Create a Makefile target for building the package and running any target
  # dependencies
  create_package_target("${target_name}" ${CPACK_OUTPUT_CONFIG_FILE})

  # Add target dependencies to run before the package target if
  # target_dependencies is defined
  if(DEFINED target_dependencies)
    add_dependencies("${target_name}" ${target_dependencies})
  endif()

  # Append the package target to the list of all package targets
  append_global_property(all_package_targets "${target_name}")
endmacro()

# Sets a GitHub output parameter by appending a statement to the file defined by
# the GITHUB_OUTPUT environment variable. It enables the passing of data from
# this CMake project to GitHub Actions.
function(set_github_output outputName outputValue)
  if(NOT DEFINED ENV{GITHUB_OUTPUT})
    message(STATUS
      "GITHUB_OUTPUT environment variable not detected. Skipping output: ${outputName}"
    )
    return()
  endif()

  # Return an error if the value of GITHUB_OUTPUT is not a file
  if(NOT EXISTS "$ENV{GITHUB_OUTPUT}")
    message(FATAL_ERROR
      "The GITHUB_OUTPUT environment variable does not contain a path to an existing file"
    )
  endif()

  require_variables(
    CPACK_PACKAGE_FILE_NAME
    PACKAGE_FILE_EXTENSION
    target_name
  )

  file(APPEND "$ENV{GITHUB_OUTPUT}" "${outputName}=${outputValue}\n")
endfunction()

# Build CPackConfig & targets for deb
macro(build_deb_cpack_config)
  build_cpack_config()
  append_global_property(all_linux_package_targets "${target_name}")
  append_global_property(all_deb_package_targets "${target_name}")
  reset_cpack_state()
endmacro()

# Build CPackConfig & targets for rpm
macro(build_rpm_cpack_config)
  build_cpack_config()
  append_global_property(all_linux_package_targets "${target_name}")
  append_global_property(all_rpm_package_targets "${target_name}")
  reset_cpack_state()
endmacro()
